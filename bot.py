#!/usr/bin/env python
# coding: utf-8

# In[ ]:


import os
import telebot
from telebot import types
import xlsxwriter
from dotenv import load_dotenv
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
TOKEN = os.getenv("TOKEN")

if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# -----------------------
# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π
# -----------------------
user_data = {}

# -----------------------
# –£—Ç–∏–ª–∏—Ç—ã
# -----------------------
def send_keyboard(chat_id, text, buttons):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å reply-–∫–Ω–æ–ø–∫–∞–º–∏"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for btn in buttons:
        markup.add(types.KeyboardButton(btn))

    if chat_id in user_data:
        user_data[chat_id]['last_question'] = text

    bot.send_message(chat_id, text, reply_markup=markup)

def save_answer(chat_id, answer):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç"""
    if chat_id in user_data and 'last_question' in user_data[chat_id]:
        user_data[chat_id].setdefault('qa_history', []).append(
            (user_data[chat_id]['last_question'], answer)
        )

def send_inline_keyboard(chat_id, text, buttons):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏"""
    markup = types.InlineKeyboardMarkup()
    for btn_text, callback_data in buttons:
        markup.add(types.InlineKeyboardButton(btn_text, callback_data=callback_data))

    if chat_id in user_data:
        user_data[chat_id]['last_question'] = text

    bot.send_message(chat_id, text, reply_markup=markup)

def export_to_excel(chat_id):
    """–§–æ—Ä–º–∏—Ä—É–µ–º Excel-—Ñ–∞–π–ª"""
    data = user_data.get(chat_id, {})
    rwa_candidates = data.get('rwa_candidates', [])
    final_rwa = min(rwa_candidates) if rwa_candidates else data.get('base_rwa', 100)
    qa_history = data.get('qa_history', [])

    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    file_name = f"RWA_result_{timestamp}.xlsx"
    filepath = file_name

    workbook = xlsxwriter.Workbook(filepath)
    worksheet = workbook.add_worksheet("RWA Result")

    header_format = workbook.add_format({'bold': True, 'bg_color': '#D7E4BC', 'border': 1})
    worksheet.write(0, 0, "–í–æ–ø—Ä–æ—Å", header_format)
    worksheet.write(0, 1, "–û—Ç–≤–µ—Ç", header_format)
    worksheet.set_column('A:A', 60)
    worksheet.set_column('B:B', 40)

    for idx, (question, answer) in enumerate(qa_history, start=1):
        worksheet.write(idx, 0, question)
        worksheet.write(idx, 1, answer)

    row = len(qa_history) + 2
    worksheet.write(row, 0, "–ò—Ç–æ–≥–æ–≤—ã–π RWA", header_format)
    worksheet.write(row, 1, f"{final_rwa}%")

    if 'reasons' in data:
        worksheet.write(row + 1, 0, "–ü—Ä–∏—á–∏–Ω—ã", header_format)
        for i, reason in enumerate(data['reasons'], start=row + 2):
            worksheet.write(i, 0, reason)

    workbook.close()

    with open(filepath, 'rb') as f:
        bot.send_document(chat_id, f, visible_file_name=file_name,
                          caption=f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ RWA: {final_rwa}%")

    os.remove(filepath)

def finalize_calculation(chat_id):
    """–§–∏–Ω–∞–ª: —Å—á–∏—Ç–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π RWA"""
    data = user_data.get(chat_id, {})
    rwa_candidates = data.get('rwa_candidates', [])
    final_rwa = min(rwa_candidates) if rwa_candidates else data.get('base_rwa', 100)
    reasons = "\n".join(data.get('reasons', [])) or "‚Äî"

    msg = (f"‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π RWA: {final_rwa}%\n\n"
           f"üìù –ü—Ä–∏—á–∏–Ω—ã:\n{reasons}\n\n"
           f"–î–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–æ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    send_inline_keyboard(chat_id, msg, [("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", "export_excel")])

def send_result(chat_id, rwa, reasons):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –≤—ã–≤–æ–¥–∏–º"""
    if chat_id not in user_data:
        user_data[chat_id] = {}
    user_data[chat_id]['rwa_candidates'] = [rwa]
    user_data[chat_id]['reasons'] = reasons
    finalize_calculation(chat_id)

# -----------------------
# –ë–ª–æ–∫–∏ –ª–æ–≥–∏–∫–∏ (–ú–°–ü, —Å–Ω–∏–∂–µ–Ω–∏–µ –∏ —Ç.–¥.)
# -----------------------
def check_msp_start(chat_id):
    send_keyboard(chat_id, "üî∏ –ó–∞—ë–º—â–∏–∫ –≤–∫–ª—é—á—ë–Ω –≤ —Ä–µ–µ—Å—Ç—Ä –ú–°–ü?", ["–î–∞", "–ù–µ—Ç"])

def go_to_100_block(chat_id):
    if user_data[chat_id]['base_rwa'] == 100:
        finalize_calculation(chat_id)
        return
    text = (
        "‚ùóÔ∏è –ú–°–ü –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è RWA=75% –∏–ª–∏ 85%.\n"
        "üìâ –í–æ–∑–º–æ–∂–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ RWA –¥–æ 100%:\n"
        "1Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–ø–ª–∞—Ç—ã –Ω–∞–ª–æ–≥–æ–≤ >10% –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –∏–ª–∏ >100 –º–ª–Ω —Ä—É–±\n"
        "2Ô∏è‚É£ –†–µ–π—Ç–∏–Ω–≥ ‚â• ruBB+/BB+(RU)\n"
        "3Ô∏è‚É£ –°–æ–≤–æ–∫—É–ø–Ω–∞—è —Å—Å—É–¥–∞ <10 –º–ª–Ω —Ä—É–±\n"
        "4Ô∏è‚É£ –ü–æ—Ä—É—á–∏—Ç–µ–ª—å—Å—Ç–≤–æ/–≥–∞—Ä–∞–Ω—Ç–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è"
    )
    send_keyboard(chat_id, text, ["1", "2", "3", "4", "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö"])

# -----------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫
# -----------------------
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    chat_id = call.message.chat.id
    if call.data == "export_excel":
        export_to_excel(chat_id)
        bot.answer_callback_query(call.id, "–§–∞–π–ª –≥–æ—Ç–æ–≤–∏—Ç—Å—è...")

# -----------------------
# –°—Ç–∞—Ä—Ç
# -----------------------
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        'reasons': [],
        'rwa_candidates': [],
        'type': None,
        'base_rwa': 100,
        'kk': None,
        'pro_mode': False,
        'qa_history': []
    }

    text = (
            "üîç –†–∞—Å—á—ë—Ç RWA ‚Äî –ø–æ—à–∞–≥–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫\n\n"
            "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—ë–º—â–∏–∫–∞:\n"
            "‚Äî –ú–∞–ª—ã–π –∏ —Å—Ä–µ–¥–Ω–∏–π –±–∏–∑–Ω–µ—Å (–ú–°–ü)\n"
            "‚Äî –ö—Ä—É–ø–Ω—ã–π –±–∏–∑–Ω–µ—Å\n"
            "‚Äî –ò–Ω–≤–µ—Å—Ç-–∫–ª–∞—Å—Å (–∑–∞–µ–º—â–∏–∫ –∏–ª–∏ –ø–æ—Ä—É—á–∏—Ç–µ–ª—å)\n"
            "‚Äî –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–π–º\n\n"
            "üìå –ü–æ–¥—Å–∫–∞–∑–∫–∏:\n"
            "- –ò–Ω–≤–µ—Å—Ç-–∫–ª–∞—Å—Å: –ö–ö 1‚Äì2; —Ü–µ–Ω–Ω—ã–µ –±—É–º–∞–≥–∏ –∑–∞–µ–º—â–∏–∫–∞/–≥–æ–ª–æ–≤–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ 1‚Äì2 –∫–æ—Ç–∏—Ä–æ–≤–∞–ª—å–Ω—ã—Ö —Å–ø–∏—Å–∫–∞—Ö; "
            "–Ω–∞–ª–∏—á–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –ø–æ 220-–ò; –Ω–µ –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä—É–µ—Ç—Å—è —Å –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–º.\n"
            "- –°–ø–µ—Ü–∑–∞–π–º—ã: –û–±—ä–µ–∫—Ç–Ω–æ–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ (RWA=100%), –¢–æ–≤–∞—Ä–Ω–æ-—Å—ã—Ä—å—ë (RWA=100%), "
            "–ü—Ä–æ–µ–∫—Ç–Ω–æ–µ (RWA=130/100/80 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞–¥–∏–∏ –∏ –∫—Ä–µ–¥–∏—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏)."
        )
    send_keyboard(chat_id, text, ["–ú–°–ü", "–ö—Ä—É–ø–Ω—ã–π –±–∏–∑–Ω–µ—Å", "–ò–Ω–≤–µ—Å—Ç-–∫–ª–∞—Å—Å", "–°–ø–µ—Ü–∑–∞–π–º"])

# -----------------------
# –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
# -----------------------
@bot.message_handler(func=lambda msg: True)
def handle_answer(message):
    chat_id = message.chat.id
    text = message.text.strip()
    save_answer(chat_id, text)

    # === –í–µ—Ç–∫–∞ 1: –≤—ã–±–æ—Ä —Ç–∏–ø–∞ ===
    if text == "–°–ø–µ—Ü–∑–∞–π–º":
        send_keyboard(chat_id,
                      "üî∏ –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞—ë–º–∞:",
                      ["–û–±—ä–µ–∫—Ç–Ω–æ–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ", "–¢–æ–≤–∞—Ä–Ω–æ-—Å—ã—Ä—å—ë", "–ü—Ä–æ–µ–∫—Ç–Ω–æ–µ"])
        return

    # === –í–µ—Ç–∫–∞ 2: —Å–ø–µ—Ü–∑–∞–π–º—ã ===
    if text == "–û–±—ä–µ–∫—Ç–Ω–æ–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ":
        send_result(chat_id, 100, ["–û–±—ä–µ–∫—Ç–Ω–æ–µ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Üí RWA=100%"])
        return
    if text == "–¢–æ–≤–∞—Ä–Ω–æ-—Å—ã—Ä—å—ë":
        send_result(chat_id, 100, ["–¢–æ–≤–∞—Ä–Ω–æ-—Å—ã—Ä—å—ë ‚Üí RWA=100%"])
        return
    if text == "–ü—Ä–æ–µ–∫—Ç–Ω–æ–µ":
        send_keyboard(chat_id, "üî∏ –§–∞–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞:", ["–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ/—Å–ª–∞–±–∞—è –∫—Ä–µ–¥–∏—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å",
                                                   "–≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è (—Å—Ä–µ–¥–Ω—è—è –∫—Ä–µ–¥–∏—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å)",
                                                   "–≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è (–≤—ã—Å–æ–∫–∞—è –∫—Ä–µ–¥–∏—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å)"])
        return
    if text == "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ/—Å–ª–∞–±–∞—è –∫—Ä–µ–¥–∏—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å":
        send_result(chat_id, 130, ["–ü—Ä–æ–µ–∫—Ç ‚Üí –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ/—Å–ª–∞–±–∞—è –ö–° ‚Üí RWA=130%"])
        return
    if text == "–≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è (—Å—Ä–µ–¥–Ω—è—è –∫—Ä–µ–¥–∏—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å)":
        send_result(chat_id, 100, ["–ü—Ä–æ–µ–∫—Ç ‚Üí –≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è (—Å—Ä–µ–¥–Ω—è—è –ö–°) ‚Üí RWA=100%"])
        return
    if text == "–≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è (–≤—ã—Å–æ–∫–∞—è –∫—Ä–µ–¥–∏—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å)":
        send_result(chat_id, 80, ["–ü—Ä–æ–µ–∫—Ç ‚Üí –≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è (–≤—ã—Å–æ–∫–∞—è –ö–°) ‚Üí RWA=80%"])
        return

    # === –í–µ—Ç–∫–∞ 3: –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ ===
    if text in ["–ú–°–ü", "–ö—Ä—É–ø–Ω—ã–π –±–∏–∑–Ω–µ—Å","–ò–Ω–≤–µ—Å—Ç-–∫–ª–∞—Å—Å"]:
        user_data[chat_id]['type'] = text
        text = (
                "2Ô∏è‚É£ –ï—Å—Ç—å –ª–∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ø–æ –∫—Ä–µ–¥–∏—Ç—É?\n\n"
                "üìå –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ª—å–≥–æ—Ç–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è RWA = 0%.\n"
                "–ß—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ–º:\n"
                "- 80% —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–æ–ª–≥–æ–≤—ã—Ö –¶–ë –°–ö–ë (–≤–∞–ª—é—Ç–∞ –∫—Ä–µ–¥–∏—Ç–∞ = –≤–∞–ª—é—Ç–∞ –∑–∞–ª–æ–≥–∞)\n"
                "- –ó–æ–ª–æ—Ç–æ –≤ —Å–ª–∏—Ç–∫–∞—Ö\n"
                "- –û–±–µ—Å–ø–µ—á–∏—Ç–µ–ª—å–Ω—ã–π –ø–ª–∞—Ç—ë–∂\n"
                "- –ó–∞–ª–æ–≥ –ø—Ä–∞–≤ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞/–≤–∫–ª–∞–¥–∞\n"
            )
        send_keyboard(chat_id,
                      text,
                      ["–î–∞", "–ù–µ—Ç"])
        return

    # === –í–µ—Ç–∫–∞ 4: –∏–Ω–≤–µ—Å—Ç-–∫–ª–∞—Å—Å ===
    if user_data[chat_id].get('type') == "–ò–Ω–≤–µ—Å—Ç-–∫–ª–∞—Å—Å":
        if text == "–î–∞":
            send_result(chat_id, 0, ["–ò–Ω–≤–µ—Å—Ç-–∫–ª–∞—Å—Å —Å –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ–º ‚Üí RWA=0%"])
            return
        if text == "–ù–µ—Ç":
            send_result(chat_id, 65, ["–ò–Ω–≤–µ—Å—Ç-–∫–ª–∞—Å—Å –±–µ–∑ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è ‚Üí RWA=65%"])
            return

    # === –í–µ—Ç–∫–∞ 4: —Ä–µ–≥–∏–æ–Ω ===
    if user_data[chat_id].get('type') in ["–ú–°–ü", "–ö—Ä—É–ø–Ω—ã–π –±–∏–∑–Ω–µ—Å"] and user_data[chat_id].get('last_question', "").startswith("2Ô∏è‚É£ –ï—Å—Ç—å –ª–∏"):
        if text == "–î–∞":
            send_result(chat_id, 0, ["–ö—Ä–µ–¥–∏—Ç —Å –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ–º ‚Üí RWA=0%"])
            return
        if text == "–ù–µ—Ç":
            send_keyboard(chat_id,
                          "3Ô∏è‚É£ –†–µ–≥–∏–æ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞—ë–º—â–∏–∫–∞:\n"
                          "(–ö—Ä—ã–º/–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å/–î–ù–†/–õ–ù–†/–ó–∞–ø–æ—Ä–æ–∂—å–µ/–•–µ—Ä—Å–æ–Ω ‚Üí RWA=75%)",
                          ["–ö—Ä—ã–º/–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å/–î–ù–†/–õ–ù–†/–ó–∞–ø–æ—Ä–æ–∂—å–µ/–•–µ—Ä—Å–æ–Ω", "–î—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω"])
            return
    
    if text == "–ö—Ä—ã–º/–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å/–î–ù–†/–õ–ù–†/–ó–∞–ø–æ—Ä–æ–∂—å–µ/–•–µ—Ä—Å–æ–Ω":
        send_result(chat_id, 75, ["–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏–æ–Ω ‚Üí RWA=75%"])
        return
    if text == "–î—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω":
        text = (
            "4Ô∏è‚É£ –¶–µ–ª—å –∫—Ä–µ–¥–∏—Ç–∞ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∏—Å–∫–∞:\n\n"
            "‚Ä¢ RWA=200%: –≤–ª–æ–∂–µ–Ω–∏—è –≤ —É—Å—Ç–∞–≤–Ω—ã–µ –∫–∞–ø–∏—Ç–∞–ª—ã –¥—Ä—É–≥–∏—Ö —é—Ä. –ª–∏—Ü.\n"
            "‚Ä¢ RWA=150%: –∑–∞–π–º—ã —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º, –ø–æ–≥–∞—à–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –ø–µ—Ä–µ–¥ —Ç—Ä–µ—Ç—å–∏–º–∏ –ª–∏—Ü–∞–º–∏, "
            "–ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –¥–æ–ª–µ–π/–∞–∫—Ü–∏–π –≤ —Å–ø–µ–∫—É–ª—è—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª—è—Ö, –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å/–∑–µ–º–ª—è –Ω–∞ —Å—É–º–º—É >100 –º–ª–Ω.\n"
            "‚Ä¢ RWA=100%: –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±–æ—Ä–æ—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ–∫—É–ø–∫–∞ –û–°, –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å <100 –º–ª–Ω, "
            "—É—á–∞—Å—Ç–∏–µ –≤ —Ç–æ—Ä–≥–∞—Ö, –ª–∏–∑–∏–Ω–≥ –∏ —Ç.–¥."
        )
        send_keyboard(chat_id,
                      text,
                      ["RWA=200%", "RWA=150%", "RWA=100%"])
        return

    # === –í–µ—Ç–∫–∞ 5: —Ü–µ–ª—å –∫—Ä–µ–¥–∏—Ç–∞ ===
    if text in ["RWA=200%", "RWA=150%", "RWA=100%"]:
        base_rwa_map = {"RWA=200%": 200, "RWA=150%": 150, "RWA=100%": 100}
        target_rwa_map = {"RWA=200%": '–≤–ª–æ–∂–µ–Ω–∏—è –≤ –£–ö –¥—Ä—É–≥–∏—Ö –Æ–õ', "RWA=150%": '–∑–∞–π–º—ã, –ø–æ–≥–∞—à–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤, —Å–ø–µ–∫—É–ª—è—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏',
                          "RWA=100%": '–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±–æ—Ä–æ—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ–∫—É–ø–∫–∞ –û–°, –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å <100 –º–ª–Ω'}
        base_rwa = base_rwa_map[text]
        user_data[chat_id].update({
            'base_rwa': base_rwa,
            'rwa_candidates': [base_rwa],
            'reasons': [f"–¶–µ–ª—å: {target_rwa_map[text]} ‚Üí RWA={base_rwa}%"]
        })
        check_msp_start(chat_id)
        return

    # === –í–µ—Ç–∫–∞ 6: –ú–°–ü ===
    if text == "–î–∞" and user_data[chat_id].get('last_question', "").startswith("üî∏ –ó–∞—ë–º—â–∏–∫ –≤–∫–ª—é—á—ë–Ω"):
        send_keyboard(chat_id, "üî∏ –£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞—á–µ—Å—Ç–≤–∞ –∫—Ä–µ–¥–∏—Ç–∞:", ["1", "2", "3", "–î—Ä—É–≥–∞—è"])
        return
    if text == "–ù–µ—Ç" and user_data[chat_id].get('last_question', "").startswith("üî∏ –ó–∞—ë–º—â–∏–∫ –≤–∫–ª—é—á—ë–Ω"):
        go_to_100_block(chat_id)
        return
    if text in ["1", "2", "3", "–î—Ä—É–≥–∞—è"] and "–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞—á–µ—Å—Ç–≤–∞" in user_data[chat_id].get('last_question', ""):
        if text not in ["1", "2", "3"]:
            go_to_100_block(chat_id)
            return
        user_data[chat_id]['kk'] = text
        send_keyboard(chat_id, "üî∏ –ï—Å—Ç—å –ø—Ä–æ—Å—Ä–æ—á–∫–∞ —Å–≤—ã—à–µ 90 –¥–Ω–µ–π?", ["–î–∞", "–ù–µ—Ç"])
        return
    if text == "–î–∞" and "–ï—Å—Ç—å –ø—Ä–æ—Å—Ä–æ—á–∫–∞" in user_data[chat_id].get('last_question', ""):
        go_to_100_block(chat_id)
        return
    if text == "–ù–µ—Ç" and "–ï—Å—Ç—å –ø—Ä–æ—Å—Ä–æ—á–∫–∞" in user_data[chat_id].get('last_question', ""):
        send_keyboard(chat_id, "üî∏ –°–æ–≤–æ–∫—É–ø–Ω–∞—è —Å—Å—É–¥–Ω–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å < 8 –º–ª—Ä–¥?", ["–î–∞", "–ù–µ—Ç"])
        return
    if text == "–ù–µ—Ç" and "–°–æ–≤–æ–∫—É–ø–Ω–∞—è —Å—Å—É–¥–Ω–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å" in user_data[chat_id].get('last_question', ""):
        go_to_100_block(chat_id)
        return
    if text == "–î–∞" and "–°–æ–≤–æ–∫—É–ø–Ω–∞—è —Å—Å—É–¥–Ω–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å" in user_data[chat_id].get('last_question', ""):
        send_keyboard(chat_id, "üî∏ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:", ["–ü–û–° <70 –º–ª–Ω", "–ò–Ω–¥–∏–≤/–ü–û–° >70 –º–ª–Ω"])
        return
    if text == "–ü–û–° <70 –º–ª–Ω":
        user_data[chat_id]['rwa_candidates'].append(75)
        user_data[chat_id]['reasons'].append(f"–ú–°–ü: –ü–û–° <70 –º–ª–Ω, –ö–ö{user_data[chat_id]['kk']} ‚Üí RWA=75%")
        finalize_calculation(chat_id)
        return
    if text == "–ò–Ω–¥–∏–≤/–ü–û–° >70 –º–ª–Ω":
        send_keyboard(chat_id, "üî∏ –í—ã—Ä—É—á–∫–∞ >3,5 –º–ª—Ä–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∏–Ω. –≥–æ–¥?", ["–î–∞", "–ù–µ—Ç"])
        return
    if text == "–î–∞" and "–í—ã—Ä—É—á–∫–∞" in user_data[chat_id].get('last_question', ""):
        user_data[chat_id]['rwa_candidates'].append(85)
        user_data[chat_id]['reasons'].append(f"–ú–°–ü: –ò–Ω–¥–∏–≤/–ü–û–° >70 –º–ª–Ω, –≤—ã—Ä—É—á–∫–∞>3,5 –º–ª—Ä–¥, –ö–ö{user_data[chat_id]['kk']} ‚Üí RWA=85%")
        finalize_calculation(chat_id)
        return
    if text == "–ù–µ—Ç" and "–í—ã—Ä—É—á–∫–∞" in user_data[chat_id].get('last_question', ""):
        go_to_100_block(chat_id)
        return

    # === –í–µ—Ç–∫–∞ 7: —Å–Ω–∏–∂–µ–Ω–∏–µ –¥–æ 100% ===
    if text in ["1", "2", "3", "4"] and "–í–æ–∑–º–æ–∂–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ" in user_data[chat_id].get('last_question', ""):
        reasons_map = {
            "1": "–ù–∞–ª–æ–≥–∏ >10% –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –∏–ª–∏ >100 –º–ª–Ω ‚Üí RWA=100%",
            "2": "–†–µ–π—Ç–∏–Ω–≥ ‚â• ruBB+/BB+(RU) ‚Üí RWA=100%",
            "3": "–°—Å—É–¥—ã <10 –º–ª–Ω —Ä—É–± ‚Üí RWA=100%",
            "4": "–ü–æ—Ä—É—á–∏—Ç–µ–ª—å—Å—Ç–≤–æ/–≥–∞—Ä–∞–Ω—Ç–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è ‚Üí RWA=100%",
        }
        user_data[chat_id]['rwa_candidates'].append(100)
        user_data[chat_id]['reasons'].append(reasons_map[text])
        finalize_calculation(chat_id)
        return
    if text == "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö" and "–í–æ–∑–º–æ–∂–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ" in user_data[chat_id].get('last_question', ""):
        finalize_calculation(chat_id)
        return

# -----------------------
# –ó–∞–ø—É—Å–∫
# -----------------------
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.infinity_polling()

